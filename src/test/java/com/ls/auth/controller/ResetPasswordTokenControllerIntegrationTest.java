package com.ls.auth.controller;

import com.ls.comitte.test.TestDataFactory;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

import java.util.Map;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Integration tests for password reset flow endpoints.
 *
 * Notes:
 * - requestReset() can be asserted end-to-end; validate/confirm often require capturing the generated token
 *   which may be sent via email. For a full flow in tests, either read the token from the DB or add a test hook.
 * - Update assertions to match your PasswordResetValidateDto shape.
 */
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class ResetPasswordTokenControllerIntegrationTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;

    private static final String REQUEST_URL = "/api/auth/password-reset/request";
    private static final String VALIDATE_URL = "/api/auth/password-reset/validate/{token}";
    private static final String CONFIRM_URL = "/api/auth/password-reset/confirm";
    private static final String REGISTER_URL = "/api/auth/register";

    @BeforeEach
    void beforeEach() {
        // clean DB if needed; test profile uses create-drop by default
    }

    @Test
    void requestReset_shouldReturn202() throws Exception {
        // Ensure account exists (optional â€” service should not reveal existence)
        var registerPayload = TestDataFactory.memberPayload("reset.test@example.com", "Password4!", "Reset Test");
        mockMvc.perform(post(REGISTER_URL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerPayload)))
                .andExpect(status().isCreated());

        var payload = Map.of("email", "reset.test@example.com");

        mockMvc.perform(post(REQUEST_URL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(payload)))
                .andExpect(status().isAccepted());
    }

    @Test
    void validateAndConfirm_placeholder() throws Exception {
        // Full token validation/confirm flow requires access to the actual token generated by ResetPasswordTokenService.
        // Options to test end-to-end:
        //  - read the token record from the test DB (use repository in test)
        //  - expose a test-only endpoint or hook that returns the last issued token (only in test profile)
        //
        // Example (pseudo):
        // String token = tokenRepository.findLatestForEmail("reset.test@example.com").getToken();
        // mockMvc.perform(get(VALIDATE_URL, token)).andExpect(status().isOk()).andExpect(jsonPath("$.valid").value(true));
        //
        // After confirming, call POST /confirm with { token, newPassword } and expect 200 OK.
    }
}
